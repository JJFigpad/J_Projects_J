//Variables generales
final int col = 10;
final int fil = 20;
int last = 0;
int c = 0;
int c_c = 0;
int x = 0;
int y = 0; //579
int temph = 0;
int tempc = 0;
boolean cp = true;
boolean pe = false;
//Variables para puntos y niveles
int score = 0;
int nivel = 0;
int vel = 0;

void setup() {
  size(610, 620, P2D);
  Tablero();
  textSize(20);
}
void draw() {
  background(0);
  if (Final() == false) {
    Extras();
    displayT();
    drawP();
  } else {
    Extras();
    displayT();
    push();
    textSize(55);
    fill(255);
    text("Game Over", 160, 320);
    pop();
  }
}

void keyPressed() {
  if (key == CODED) {
    if (keyCode == UP && c < 19) {
      if ((tRotation == tR1 && x+hor*30 == block1) || (tRotation == tR2 && x+hor*30 == block2) || (RotV() == false)) {
        tRotation+=0;
      } else {
        tRotation ++;
      }
    }
    tRotation = tRotation < 0 ? 3 : tRotation % 4;
    if (keyCode == DOWN && y+30*c < 579 && (limyP() == true)) {
      c++;
      score ++;
    }
    if (keyCode == LEFT && (270+hor*30) >= lim1 && (limxiP() == true)) {
      hor--;
    } else if (keyCode == RIGHT && (270+hor*30) <= lim2 && (limxdP() == true)) {
      hor++;
    }
  }
}

void Extras() {
  push();
  textSize(40);
  fill(255,0,0);
  text("TETRIS", 465, 115);
  pop();
  push();
  fill(255,0,0);
  //text("Estadisticas: ", 480, 370);
  text("Lineas:", 30, 230);
  text("Puntaje:", 30, 360);
  text("Nivel:", 480, 300);
  fill(255);
  text((nivel+1), 500, 330);
  text(ct1, 50, 260);
  text(score, 50, 390);
  pop();
  push();
  fill(0);
  rect(151, 0, 300, 10);
  pop();
}

Boolean Final() {
  if ((c < 1 || tempc <= 1) && tablero[temph][c_c] != 0)
    return true;
  return false;
}

//Colisiones y jugadas validas
Boolean limyP() {
  if (rand == "T") {
    if (tRotation == 0 && c > 0) {
      if (tablero[temph+1][c_c+1] == 0 && tablero[temph][c_c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1) {
      if (tablero[temph+1][c_c+1] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph+1][c_c] == 0 && tablero[temph][c_c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3) {
      if (tablero[temph][c_c] == 0 && tablero[temph+1][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "L") {
    if (tRotation == 0 && c > 0) {
      if (tablero[temph+1][c] == 0 && tablero[temph+2][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 && c > 0) {
      if (tablero[temph][c_c+1] == 0 && tablero[temph+1][c_c+1] == 0 && tablero[temph+2][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph+1][c_c+1] == 0 && tablero[temph+2][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3 && c > 0) {
      if (tablero[temph][c_c+1] == 0 && tablero[temph+1][c_c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "J") {
    if (tRotation == 0 && c > 0) {
      if (tablero[temph+1][c_c+1] == 0 && tablero[temph+2][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1) {
      if (tablero[temph][c_c+1] == 0 && tablero[temph+1][c_c+1] == 0 && tablero[temph+2][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph+1][c_c+1] == 0 && tablero[temph+2][c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if ((tRotation == 3) && c > 0) {
      if (tablero[temph+2][c_c+1] == 0 && tablero[temph+1][c_c] == 0 && tablero[temph][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "O" && c > 0) {
    if (tablero[temph][c_c] == 0 && tablero[temph+1][c_c] == 0) {
      return true;
    } else {
      return false;
    }
  } else if (rand == "Z") {
    if ((tRotation == 0 || tRotation == 2) && c > 0) {
      if (tablero[temph+1][c_c+1] == 0 && tablero[temph][c_c+1] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if ((tRotation == 1 || tRotation == 3) && c > 0) {
      if (tablero[temph][c_c] == 0 && tablero[temph+1][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "S") {
    if ((tRotation == 0 || tRotation == 2) && c > 0) {
      if (tablero[temph+1][c_c+1] == 0 && tablero[temph+2][c_c+1] == 0 && tablero[temph][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if ((tRotation == 1 || tRotation == 3) && c > 0) {
      if (tablero[temph][c_c+1] == 0 && tablero[temph+1][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "I") {
    if ((tRotation == 0 || tRotation == 2) && c >= 1 && temph >= 0) {
      if (tablero[temph+3][c_c+2] == 0) {
        return true;
      } else {
        return false;
      }
    } else if ((tRotation == 1 || tRotation == 3) && (c > 0 && temph+1 > 0)) {
      if (tablero[temph][c_c] == 0 && tablero[temph+1][c_c] == 0 && tablero[temph+2][c_c] == 0 && tablero[temph+3][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  }
  return true;
}

Boolean limxiP() {
  if (rand == "T") {
    if (tRotation == 0) {
      if (tablero[temph-1][c] == 0 && tablero[temph][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 && c > 0) {
      if (tablero[temph][c-1] == 0 && tablero[temph][c] == 0 && tablero[temph][c_c] == 0) {
        return true;
      } else {
        //if (tablero[temph][c] != 0 && tablero[temph][c-1] != 0)
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph-1][c] == 0 && tablero[temph][c-1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3 && c >= 1) {
      if (tablero[temph-1][c-1] == 0 && tablero[temph][c] == 0 && tablero[temph][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand =="L") {
    if (tRotation == 0 && c >= 1) {
      if (tablero[temph][c-1] == 0 && tablero[temph+1][c_c] == 0 && tablero[temph+1][c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 && c >= 1) {
      if (tablero[temph-1][c_c] == 0 && tablero[temph+1][c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph][c_c] == 0 && tablero[temph][c-1] == 0 && tablero[temph][c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3 && c >= 1) {
      if (tablero[temph-1][c_c] == 0 && tablero[temph-1][c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand =="J") {
    if (tRotation == 0 && c > 0) {
      if (tablero[temph][c_c] == 0 && tablero[temph+1][c] == 0 && tablero[temph+1][c-1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 && c > 0) {
      if (tablero[temph-1][c] == 0 && tablero[temph-1][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph][c] == 0 && tablero[temph][c_c] == 0 && tablero[temph][c-1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3 && c >=1) {
      if (tablero[temph-1][c] == 0 && tablero[temph+1][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "O" && c > 0) {
    if (tablero[temph-1][c] == 0 && tablero[temph-1][c-1] == 0) {
      return true;
    } else {
      return false;
    }
  } else if (rand == "Z") {
    if ((tRotation == 1 || tRotation == 3) && c > 0) {
      if (tablero[temph-1][c-1] == 0 && tablero[temph-1][c] == 0 && tablero[temph][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 0 || tRotation == 2) {
      if (tablero[temph-1][c_c] == 0 && tablero[temph][c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "S") {
    if ((tRotation == 1 || tRotation == 3) && c > 0) {
      if (tablero[temph][c-1] == 0 && tablero[temph-1][c] == 0 && tablero[temph-1][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 0 || tRotation == 2) {
      if (tablero[temph][c_c] == 0 && tablero[temph-1][c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "I") {
    if ((tRotation == 0 || tRotation == 2) && c > 0) {
      if (tablero[temph+2][c-1] == 0 && tablero[temph+2][c] == 0 && tablero[temph+2][c_c] == 0 && tablero[temph+2][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 || tRotation == 3) {
      if (tablero[temph-1][c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  }
  return false;
}

Boolean limxdP() {
  if (rand == "T") {
    if (tRotation == 0) {
      if (tablero[temph+3][c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 && c >=1) {
      if (tablero[temph+2][c-1] == 0 && tablero[temph+3][c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph+3][c] == 0 && tablero[temph+1][c-1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3 && c >=1) {
      if (tablero[temph+2][c-1] == 0 && tablero[temph+2][c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "L") {
    if (tRotation == 0) {
      if (tablero[temph+3][c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 && c >=1) {
      if (tablero[temph+2][c-1] == 0 && tablero[temph+3][c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2) {
      if (tablero[temph+2][c_c] == 0 && tablero[temph+2][c_c] == 0 && tablero[temph+3][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3 && c >=1) {
      if (tablero[temph+3][c-1] == 0 && tablero[temph+3][c] == 0 && tablero[temph+3][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "J") {
    if (tRotation == 0 && c > 0) {
      if (tablero[temph+3][c] == 0 && tablero[temph+3][c_c] == 0 && tablero[temph+3][c-1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 && c > 0) {
      if (tablero[temph+1][c] == 0 && tablero[temph+3][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 2 && c > 0) {
      if (tablero[temph+2][c_c] == 0 && tablero[temph+2][c] == 0 && tablero[temph+3][c-1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 3 && c >=1) {
      if (tablero[temph+3][c] == 0 && tablero[temph+3][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "O" && c > 0) {
    if (tablero[temph+2][c] == 0 && tablero[temph+2][c-1] == 0) {
      return true;
    } else {
      return false;
    }
  } else if (rand == "Z") {
    if ((tRotation == 1 || tRotation == 3) && c > 0) {
      if (tablero[temph+1][c-1] == 0 && tablero[temph+2][c] == 0 && tablero[temph+2][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 0 || tRotation == 2) {
      if (tablero[temph+2][c_c] == 0 && tablero[temph+3][c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "S") {
    if ((tRotation == 1 || tRotation == 3) && c > 0) {
      if (tablero[temph+2][c-1] == 0 && tablero[temph+2][c] == 0 && tablero[temph+1][c_c] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 0 || tRotation == 2) {
      if (tablero[temph+3][c_c] == 0 && tablero[temph+2][c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  } else if (rand == "I") {
    if ((tRotation == 0 || tRotation == 2) && c > 0) {
      if (tablero[temph+4][c-1] == 0 && tablero[temph+4][c] == 0 && tablero[temph+4][c_c] == 0 && tablero[temph+4][c_c+1] == 0) {
        return true;
      } else {
        return false;
      }
    } else if (tRotation == 1 || tRotation == 3) {
      if (tablero[temph+4][c] == 0) {
        return true;
      } else {
        return false;
      }
    }
  }
  return false;
}

Boolean RotV() {
  if (rand == "T") {
    if (limyP() == false && tRotation == 2 && tablero[temph+1][c_c] != 0) {
      return false;
    } else if (limxiP() == false && tRotation == 1 && tablero[temph][c] != 0) {
      return false;
    } else if (limxdP() == false && tRotation == 3 && tablero[temph+2][c] != 0) {
      return false;
    }
  } else if (rand == "L" && c > 0) {
    if (limyP() == false && tRotation == 3 && (tablero[temph+1][c_c] != 0 || tablero[temph+2][c_c] != 0)) {
      return false;
    } else if ((tablero[temph+1][c_c] != 0 || tablero[temph+1][c] != 0  || tablero[temph][c_c] != 0) && (tRotation == 0 || tRotation == 2)) {
      return false;
    } else if (tRotation == 2 && (tablero[temph+2][c] != 0 || tablero[temph+2][c-1] != 0)) {
      return false;
    }
  } else if (rand == "J" && c > 0) {
    if (limyP() == false && tRotation == 3 && (tablero[temph+1][c_c] != 0 || tablero[temph][c_c] != 0)) {
      return false;
    } else if ((tablero[temph][c_c] != 0 || tablero[temph][c] != 0) && (tRotation == 0 || tRotation == 2)) {
      return false;
    } else if ((tRotation == 2) && (tablero[temph+2][c] != 0 || tablero[temph+2][c_c] != 0)) {
      return false;
    }
  } else if (rand == "Z") {
    if (tRotation == 0 || tRotation == 2) {
      if (tablero[temph+2][c_c] != 0)
        return false;
    } else if (tRotation == 1 || tRotation == 3) {
      if (tablero[temph][c_c] != 0)
        return false;
    }
  } else if (rand == "S") {
    if (tRotation == 0 || tRotation == 2) {
      if (tablero[temph][c_c] != 0)
        return false;
    } else if (tRotation == 1 || tRotation == 3) {
      if (tablero[temph+1][c_c] != 0)
        return false;
    }
  } else if (rand == "I" && c > 0) {
    if (temph >= 0) {
      if ((tRotation == 0 || tRotation == 2) && (tablero[temph+2][c] != 0 || tablero[temph+1][c] != 0 || tablero[temph][c] != 0)) {
        return false;
      }
      if (((tRotation == 1 || tRotation == 3) && (tablero[temph+3][c-1] != 0 || tablero[temph+3][c] != 0 || tablero[temph+3][c_c] != 0)) || c >= 18) {
        return false;
      }
    }
  }
  return true;
}

//Variables de las figuras
int hor = 0;
int lim1 = 0;
int lim2 = 0;
int tR1 = 0;
int tR2 = 0;
int block1 = 0;
int block2 = 0;
int [] T = {58, 154, 184, 178};
int [] L = {201, 15, 147, 60};
int [] J = {75, 39, 210, 57};
int [] O = {15};
int [] Z = {30, 306, 30, 306};
int [] S = {51, 180, 51, 180};
int [] I = {4369, 3840, 4369, 3840};
int tRotation = 0;
String[] piezas = {"T", "L", "J", "O", "Z", "S", "I"};
String rand;

//Funciones de las piezas
void sigpieza() {
  if (siguiente() == true) {
    tRotation = int(random(4));
    rand = piezas[int(random(7))]; //int(random(7))
    if (rand == "I" && (tRotation == 0 || tRotation == 2)) {  
      hor = -3;
    } else {
      hor = 0;
    }
  }
}

Boolean siguiente() {
  if (cp == true) {
    cp = false;
    return true;
  } else if ((limyP() == false) || y+30*c >= 579) { //y+30*c >= 579
    if (millis() >= last+vel) {
      tempc = c;
      c = -1;
      cp = false;
      pe = true;
      cambioP();
      return true;
    }
  }
  return false;
}

void drawP() {
  sigpieza();
  vel = 1400-(nivel*100);
  c_c = c+1;
  if (millis() >= last+vel && (limyP() == true)) {
    c++;
    last = millis();
  }
  temph = hor+5;
  push();
  translate(hor*30, c*30);
  CadaP(rand);
  pop();
  println(ct);
}

void CadaP(String rand) {                    
  if (rand == "T") {
    tR1 = 1;
    tR2 = 3;
    block1 = 150;
    block2 = 420;
    push();
    fill(191, 98, 255);
    for (int i = 0; i <= 8; i++) {
      if ((T[tRotation] & (1 << 8 - i)) != 0) {
        x = 270+((i % 3) * width / 20);
        y = (((i / 3) | 0) * height / 20)-22;
        rect(x, y, width / 20, height / 20);
      }
    }
    pop();
    if (tRotation == 0 || tRotation == 2) {
      lim1 = 180;
      lim2 = 330;
    } else if (tRotation == 1) {
      lim1 = 150;
      lim2 = 330;
    } else if (tRotation == 3) {
      lim1 = 180;
      lim2 = 360;
    }
  } else if (rand == "L") {
    tR1 = 0;
    tR2 = 2;
    block1 = 181;
    block2 = 181;
    push();
    fill(255, 109, 0);
    for (int i = 0; i <= 8; i++) {
      if ((L[tRotation] & (1 << 8 - i)) != 0) {
        x = 270+((i % 3) * width / 20);
        y = (((i / 3) | 0) * height / 20)-22;
        rect(x, y, width / 20, height / 20);
      }
    }
    pop();
    if (tRotation == 0 || tRotation == 2) {
      lim1 = 150;
      lim2 = 330;
    } else if (tRotation == 1 || tRotation == 3) {
      lim1 = 180;
      lim2 = 330;
    }
  } else if (rand == "J") {
    tR1 = 0;
    tR2 = 2;
    block1 = 181;
    block2 = 150;
    push();
    fill(21, 79, 212);
    for (int i = 0; i <= 8; i++) {
      if ((J[tRotation] & (1 << 8 - i)) != 0) {
        x = 270+((i % 3) * width / 20);
        y = (((i / 3) | 0) * height / 20)-22;
        rect(x, y, width / 20, height / 20);
      }
    }
    pop();
    if (tRotation == 0 || tRotation == 2) {
      lim1 = 150;
      lim2 = 330;
    } else if (tRotation == 1 || tRotation == 3) {
      lim1 = 180;
      lim2 = 330;
    }
  } else if (rand == "O") {
    push();
    fill(244, 253, 0);
    if (millis() >= last+1500) {
      last = millis();
      c += 1;
    }
    for (int i = 0; i <= 3; i++) {
      if ((O[0] & (1 << 3 - i)) != 0) {
        x = 270+((i%2) * width / 20);
        y = (((i / 2) | 0) * height / 20)-22;
        rect(x, y, width / 20, height / 20);
      }
    }
    pop(); 
    lim1 = 180;
    lim2 = 360;
  } else if (rand == "Z") {
    tR1 = 1;
    tR2 = 3;
    block1 = 420;
    block2 = 420;
    push();
    fill(68, 120, 0);
    for (int i = 0; i <= 8; i++) {
      if ((Z[tRotation] & (1 << 8 - i)) != 0) {
        x = 270+((i % 3) * width / 20);
        y = (((i / 3) | 0) * height / 20)-22;
        rect(x, y, width / 20, height / 20);
      }
    }
    pop();
    if (tRotation == 0 || tRotation == 2) {
      lim1 = 180;
      lim2 = 330;
    } else if (tRotation == 1 || tRotation == 3) {
      lim1 = 180;
      lim2 = 360;
    }
  } else if (rand == "S") {
    tR1 = 1;
    tR2 = 3;
    block1 = 390;
    block2 = 390;
    push();
    fill(196, 0, 5);
    if (millis() >= last+1500) {
      last = millis();
      c += 1;
    }
    for (int i = 0; i <= 8; i++) {
      if ((S[tRotation] & (1 << 8 - i)) != 0) {
        x = 270+((i % 3) * width / 20);
        y = (((i / 3) | 0) * height / 20)-22;
        rect(x, y, width / 20, height / 20);
      }
    }
    pop();
    if (tRotation == 0 || tRotation == 2) {
      lim1 = 180;
      lim2 = 330;
    } else if (tRotation == 1 || tRotation == 3) {
      lim1 = 180;
      lim2 = 360;
    }
  } else if (rand == "I") {
    tR1 = 0;
    tR2 = tR1;
    block1 = 151;
    block2 = 151;
    push();
    fill(0, 204, 204);
    for (int i = 0; i <= 15; i++) {
      if ((I[tRotation] & (1 << 15 - i)) != 0) {
        x = 270+((i % 4) * width / 20);
        y = (((i / 4) | 0) * height / 20)-22;
        rect(x, y, width / 20, height / 20);
      }
    }
    pop();
    if (tRotation == 0 || tRotation == 2) {
      lim1 = 90;
      lim2 = 300;
    } else if (tRotation == 1 || tRotation == 3) {
      lim1 = 180;
      lim2 = 300;
      if (x+hor*30 <= 181) {
        hor+=2;
      } else if (x+hor*30 <= 211) {
        hor ++;
      }
    }
  }
}

//Variables del tablero
int[][] tablero = new int[col+2][fil+1];
int ct = 1;
int ct1 = 0;

//Funciones del tablero
void Tablero() {
  for (int i = 0; i <= col+1; i++) {
    for (int j = 0; j <= fil; j++) {
      tablero[i][j] = 0;
    }
  }
}

void displayT() {
  strokeWeight(3.5);
  stroke(152, 147, 119);
  pushMatrix();
  translate(121, 9);
  for (int i = 1; i <= col; i ++) {
    line(i*30, 0, i*30, fil*30);
  }
  for (int j = 0; j <= fil; j ++) {
    line(30, j*30, col*30, j*30);
  }
  for (int i = 1; i <= col; i ++) {
    for (int j = 0; j < fil; j ++) {
      if (tablero[i][j] == 0) {
        fill(50, 50, 50);
        rect(i*30, j*30, 30, 30);
      } else if (tablero[i][j] == 1) {
        fill(191, 98, 255);
        rect(i*30, j*30, 30, 30);
      } else if (tablero[i][j] == 2) {
        fill(255, 109, 0);
        rect(i*30, j*30, 30, 30);
      } else if (tablero[i][j] == 3) {
        fill(21, 79, 212);
        rect(i*30, j*30, 30, 30);
      } else if (tablero[i][j] == 4) {
        fill(244, 253, 0);
        rect(i*30, j*30, 30, 30);
      } else if (tablero[i][j] == 5) {
        fill(68, 120, 0);
        rect(i*30, j*30, 30, 30);
      } else if (tablero[i][j] == 6) {
        fill(196, 0, 5);
        rect(i*30, j*30, 30, 30);
      } else if (tablero[i][j] == 7) {
        fill(0, 204, 204);
        rect(i*30, j*30, 30, 30);
      }
    }
  }
  popMatrix();
  borrarFila();
}

void borrarFila() {
  int borrar = 0;
  int tempi = 0;
  for (int j = 0; j < fil; j ++) {
    for (int i = 1; i <= col; i ++) {
      if (tablero[i][j] != 0) {
        borrar++;
      }
      if (borrar >= col) {
        tempi = j;
        borrar = 0;
        score += 100;
        ct++;
        ct1++;
        if (ct%6 == 0 && nivel < 12) {
          nivel++;
          ct -= 5;
        }
        break;
      }
    }
    borrar = 0;
  }
  for (int i = 1; i <= col; i ++) {
    for (int j = tempi; j >= 1; j --) {
      tablero[i][j] = tablero[i][j-1];
    }
  }
}

void cambioP() {
  if (c < 1 && pe == true) {
    if (rand == "T") {
      if (tRotation == 0) {
        tablero[temph+1][tempc] = 1;
        tablero[temph+1][tempc+1] = 1;
        tablero[temph][tempc] = 1;
        tablero[temph+2][tempc] = 1;
      } else if (tRotation == 1) {
        tablero[temph+1][tempc+1] = 1;
        tablero[temph+1][tempc] = 1;
        tablero[temph+1][tempc-1] = 1;
        tablero[temph+2][tempc] = 1;
      } else if (tRotation == 2) {
        tablero[temph+1][tempc] = 1;
        tablero[temph+1][tempc-1] = 1;
        tablero[temph][tempc] = 1;
        tablero[temph+2][tempc] = 1;
      } else if (tRotation == 3) {
        tablero[temph][tempc] = 1;
        tablero[temph+1][tempc+1] = 1;
        tablero[temph+1][tempc] = 1;
        tablero[temph+1][tempc-1] = 1;
      }
    } else if (rand == "L") {
      if (tRotation == 0) {
        tablero[temph+1][tempc-1] = 2;
        tablero[temph+2][tempc-1] = 2;
        tablero[temph+2][tempc] = 2;
        tablero[temph+2][tempc+1] = 2;
      } else if (tRotation == 1) {
        tablero[temph][tempc+1] = 2;
        tablero[temph+1][tempc+1] = 2;
        tablero[temph+2][tempc+1] = 2;
        tablero[temph+2][tempc] = 2;
      } else if (tRotation == 2) {
        tablero[temph+2][tempc+1] = 2;
        tablero[temph+1][tempc-1] = 2;
        tablero[temph+1][tempc+1] = 2;
        tablero[temph+1][tempc] = 2;
      } else if (tRotation == 3) {
        tablero[temph+1][tempc] = 2;
        tablero[temph][tempc+1] = 2;
        tablero[temph][tempc] = 2;
        tablero[temph+2][tempc] = 2;
      }
    } else if (rand == "J") {
      if (tRotation == 0) {
        tablero[temph+1][tempc+1] = 3;
        tablero[temph+2][tempc-1] = 3;
        tablero[temph+2][tempc] = 3;
        tablero[temph+2][tempc+1] = 3;
      } else if (tRotation == 1) {
        tablero[temph][tempc+1] = 3;
        tablero[temph+1][tempc+1] = 3;
        tablero[temph+2][tempc+1] = 3;
        tablero[temph][tempc] = 3;
      } else if (tRotation == 2) {
        tablero[temph+2][tempc-1] = 3;
        tablero[temph+1][tempc-1] = 3;
        tablero[temph+1][tempc+1] = 3;
        tablero[temph+1][tempc] = 3;
      } else if (tRotation == 3) {
        tablero[temph+1][tempc] = 3;
        tablero[temph+2][tempc+1] = 3;
        tablero[temph][tempc] = 3;
        tablero[temph+2][tempc] = 3;
      }
    } else if (rand == "O") {
      tablero[temph][tempc] = 4;
      tablero[temph+1][tempc] = 4;
      tablero[temph][tempc-1] = 4;
      tablero[temph+1][tempc-1] = 4;
    } else if (rand == "Z") {
      if (tRotation == 0 || tRotation == 2) {
        tablero[temph][tempc+1] = 5;
        tablero[temph+1][tempc+1] = 5;
        tablero[temph+1][tempc] = 5;
        tablero[temph+2][tempc] = 5;
      } else if (tRotation == 1 || tRotation == 3) {
        tablero[temph][tempc-1] = 5;
        tablero[temph][tempc] = 5;
        tablero[temph+1][tempc] = 5;
        tablero[temph+1][tempc+1] = 5;
      }
    } else if (rand == "S") {
      if (tRotation == 0 || tRotation == 2) {
        tablero[temph][tempc] = 6;
        tablero[temph+1][tempc] = 6;
        tablero[temph+1][tempc+1] = 6;
        tablero[temph+2][tempc+1] = 6;
      } else if (tRotation == 1 || tRotation == 3) {
        tablero[temph+1][tempc-1] = 6;
        tablero[temph+1][tempc] = 6;
        tablero[temph][tempc] = 6;
        tablero[temph][tempc+1] = 6;
      }
    } else if (rand == "I") {
      if (tRotation == 0 || tRotation == 2) {
        tablero[temph+3][tempc-1] = 7;
        tablero[temph+3][tempc] = 7;
        tablero[temph+3][tempc+1] = 7;
        tablero[temph+3][tempc+2] = 7;
      } else if (tRotation == 1 || tRotation == 3) {
        tablero[temph][tempc] = 7;
        tablero[temph+1][tempc] = 7;
        tablero[temph+2][tempc] = 7;
        tablero[temph+3][tempc] = 7;
      }
    }
  }
}
