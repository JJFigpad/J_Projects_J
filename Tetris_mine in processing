Tablero tablero;
P tp; 
int col = 10;
int fil = 20;
int last = 0;
int x = 0;
int y = 0; //579
int tempy = -2;
int tempx = 0;
int tempp = 0;
int[] tempc = new int[3];

void setup() {
  size(610, 620, P2D);
  //textSize(20);
  tablero = new Tablero(50, 50, 50);
  tp = new P();
}
void draw() {
  background(155, 155, 155);
  tablero.display();
  tp.drawP();
  fill(255);
}

void keyPressed() {
  tp.keyPressed();
}

class P {
  int c = 0;
  boolean cp = true;
  int c1 = 0;
  int c2 = 0;
  int c3 = 0;
  int hor = 0;
  int lim1 = 0;
  int lim2 = 0;
  int tR1 = 0;
  int tR2 = 0;
  int block1 = 0;
  int block2 = 0;
  int [] T = {58, 154, 184, 178};
  int [] L = {201, 15, 147, 60};
  int [] J = {75, 39, 210, 57};
  int [] O = {15};
  int [] Z = {30, 306, 30, 306};
  int [] S = {51, 180, 51, 180};
  int [] I = {4369, 3840, 4369, 3840};
  int tRotation = 0;
  String[] piezas = {"T", "L", "J", "O", "Z", "S", "I"};
  String rand;

  void sigpieza() {
    if (siguiente() == true) {
      rand = piezas[0]; //int(random(7))
      tRotation = int(random(4));
    }
  }

  Boolean siguiente() {
    if (cp == true || y+30*c >= 579) {
      cp = false;
      if (y+30*c >= 579 /*&& millis() >= last+1400*/) {
        tempy = c;
        tempx = x+hor*30;
        tempc[0] = c1;
        tempc[1] = c2;
        tempc[2] = c3;
        c = 0;
        hor = 0;
      }
      return true;
    }
    return false;
  }

  void drawP() {
    sigpieza();
    if (millis() >= last+1400 && y+30*c < 580) {
      last = millis();
      c += 1;
    }
    if (rand == "T") {
      tR1 = 1;
      tR2 = 3;
      block1 = 150;
      block2 = 420;
      push();
      fill(c1 = 191, c2 = 98, c3 = 255);
      translate(hor*30, c*30);
      for (int i = 0; i <= 8; i++) {
        if ((T[tRotation] & (1 << 8 - i)) != 0) {
          x = 270+((i % 3) * width / 20);
          y = (((i / 3) | 0) * height / 20)-22;
          rect(x, y, width / 20, height / 20);
        }
      }
      pop();
      if (tRotation == 0 || tRotation == 2) {
        lim1 = 180;
        lim2 = 330;
      } else if (tRotation == 1) {
        lim1 = 150;
        lim2 = 330;
      } else if (tRotation == 3) {
        lim1 = 180;
        lim2 = 360;
      }
    } else if (rand == "L") {
      tR1 = 0;
      tR2 = 2;
      block1 = 181;
      block2 = 181;
      push();
      fill(255, 109, 0);
      translate(hor*30, c*30);
      for (int i = 0; i <= 8; i++) {
        if ((L[tRotation] & (1 << 8 - i)) != 0) {
          x = 270+((i % 3) * width / 20);
          y = (((i / 3) | 0) * height / 20)-22;
          rect(x, y, width / 20, height / 20);
        }
      }
      pop();
      if (tRotation == 0 || tRotation == 2) {
        lim1 = 150;
        lim2 = 330;
      } else if (tRotation == 1 || tRotation == 3) {
        lim1 = 180;
        lim2 = 330;
      }
    } else if (rand == "J") {
      tR1 = 0;
      tR2 = 2;
      block1 = 181;
      block2 = 150;
      push();
      fill(c1 = 21, c2 = 79, c3 = 212);
      translate(hor*30, c*30);
      for (int i = 0; i <= 8; i++) {
        if ((J[tRotation] & (1 << 8 - i)) != 0) {
          x = 270+((i % 3) * width / 20);
          y = (((i / 3) | 0) * height / 20)-22;
          rect(x, y, width / 20, height / 20);
        }
      }
      pop();
      if (tRotation == 0 || tRotation == 2) {
        lim1 = 150;
        lim2 = 330;
      } else if (tRotation == 1 || tRotation == 3) {
        lim1 = 180;
        lim2 = 330;
      }
    } else if (rand == "O") {
      push();
      fill(244, 253, 0);
      if (millis() >= last+1500) {
        last = millis();
        c += 1;
      }
      translate(hor*30, c*30);
      for (int i = 0; i <= 3; i++) {
        if ((O[0] & (1 << 3 - i)) != 0) {
          x = 270+((i%2) * width / 20);
          y = (((i / 2) | 0) * height / 20)-22;
          rect(x, y, width / 20, height / 20);
        }
      }
      pop(); 
      lim1 = 180;
      lim2 = 360;
    } else if (rand == "Z") {
      tR1 = 1;
      tR2 = 3;
      block1 = 420;
      block2 = 420;
      push();
      fill(c1 = 68, c2 = 120, c3 = 0);
      translate(hor*30, c*30);
      for (int i = 0; i <= 8; i++) {
        if ((Z[tRotation] & (1 << 8 - i)) != 0) {
          x = 270+((i % 3) * width / 20);
          y = (((i / 3) | 0) * height / 20)-22;
          rect(x, y, width / 20, height / 20);
        }
      }
      pop();
      if (tRotation == 0 || tRotation == 2) {
        lim1 = 180;
        lim2 = 330;
      } else if (tRotation == 1 || tRotation == 3) {
        lim1 = 180;
        lim2 = 360;
      }
    } else if (rand == "S") {
      tR1 = 1;
      tR2 = 3;
      block1 = 390;
      block2 = 390;
      push();
      fill(196, 0, 5);
      if (millis() >= last+1500) {
        last = millis();
        c += 1;
      }
      translate(hor*30, c*30);
      for (int i = 0; i <= 8; i++) {
        if ((S[tRotation] & (1 << 8 - i)) != 0) {
          x = 270+((i % 3) * width / 20);
          y = (((i / 3) | 0) * height / 20)-22;
          rect(x, y, width / 20, height / 20);
        }
      }
      pop();
      if (tRotation == 0 || tRotation == 2) {
        lim1 = 180;
        lim2 = 330;
      } else if (tRotation == 1 || tRotation == 3) {
        lim1 = 180;
        lim2 = 360;
      }
    } else if (rand == "I") {
      tR1 = 0;
      tR2 = tR1;
      block1 = 151;
      block2 = 151;
      push();
      fill(c1 = 0, c2 = 204, c3 = 204);
      translate(hor*30, c*30);
      for (int i = 0; i <= 15; i++) {
        if ((I[tRotation] & (1 << 15 - i)) != 0) {
          x = 270+((i % 4) * width / 20);
          y = (((i / 4) | 0) * height / 20)-22;
          rect(x, y, width / 20, height / 20);
        }
      }
      pop();
      if (tRotation == 0 || tRotation == 2) {
        lim1 = 90;
        lim2 = 300;
      } else if (tRotation == 1 || tRotation == 3) {
        lim1 = 180;
        lim2 = 300;
        if (x+hor*30 <= 181) {
          hor+=2;
        } else if (x+hor*30 <= 211) {
          hor ++;
        }
      }
    }
    //println(c);
  }

  void keyPressed() {
    if (key == CODED) {
      if (keyCode == UP) {
        if ((tRotation == tR1 && x+hor*30 == block1) || (tRotation == tR2 && x+hor*30 == block2)) {
          tRotation+=0;
        } else {
          tRotation ++;
        }
      }
      tRotation = tRotation < 0 ? 3 : tRotation % 4;
      if (keyCode == DOWN) {
        c++;
      }
      if (keyCode == LEFT && (270+hor*30) >= lim1) {
        hor--;
      } else if (keyCode == RIGHT && (270+hor*30) <= lim2) {
        hor++;
      }
    }
  }
}

class Tablero {
  int[][] tablero = new int[col][fil];
  int c1, c2, c3;
  int ly = 20;

  Tablero(int c1, int c2, int c3) {
    this.c1 = c1;
    this.c2 = c2;
    this.c3 = c3;
    for (int i = 0; i < col; i++) {
      for (int j = 0; j < fil; j++) {
        tablero[i][j] = 0;
      }
    }
  }

  void display() {
    strokeWeight(3.5);
    stroke(152, 147, 119);
    pushMatrix();
    translate(151, 9);
    for (int i = 0; i <= col; i ++) {
      line(i*30, 0, i*30, fil*30);
    }
    for (int j = 0; j <= fil; j ++) {
      line(0, j*30, col*30, j*30);
    }

    for (int i = 0; i < col; i ++) {
      for (int j = 0; j < fil; j ++) {
        if (tablero[i][j] == 0) {
          fill(c1, c2, c3);
          rect(i*30, j*30, 30, 30);
        }
      }
    }
    popMatrix();
    translate(152,147, 119);
    if (tempy+1 == ly) {
      for (int i = 0; i < col; i ++) {
        //for (int j = 0; j < fil; j ++) {
          println(i*30);
          if (tempx == i*30 || tempx == (i*30+1) || tempx == (i*30-1)) {
            tablero[i][j] = 1;
            fill(tempc[0], tempc[1], tempc[2]);
            rect(i*30, (tempy-30)*30, 30, 30);
          //}
        }
      }
    }
  }
}
